---
export interface Props {
	game: string;
	category?: string; // Can be either category ID or category name
	subcategories?: string; // Subcategory name for games that support it
}

const { game, category, subcategories } = Astro.props;

// Build time constant - this will be evaluated when Astro builds the site
const BUILD_TIME = new Date().toISOString();

// Type definitions
interface Category {
	id: string;
	name: string;
	subcategories?: {
		id: string; // Variable ID (e.g., "ylp6e5jn")
		name: string; // Display name (e.g., "Unrestricted", "No Bow Tech")
		value: string; // Variable value ID (e.g., "p12j9xkq", "81pkedkl")
	}[];
}

interface SpeedrunRun {
	player: string;
	playerId: string;
	igt: string;
	date: string;
	platform: string;
	videoUrl?: string;
}

// Game ID mapping
const GAME_IDS: Record<string, string> = {
	bloodborne: "9d3kqg1l",
	darksouls: "w6jve26j",
	darksouls2: "m1zky010",
	darksouls3: "k6qg0xdg",
	demonssouls: "m1mn8kd2",
	ds1remaster: "lde3woe6",
	ds2sotfs: "y65lw01e",
	desremake: "j1neogy1",
	eldenring: "nd28z0ed"
};

// Category definitions for each game
const GAME_CATEGORIES: Record<string, Category[]> = {
	eldenring: [
		{ id: "02qr00pk", name: "Any%" },
		{ id: "jdr4mmn2", name: "Defeat Consort" },
		{ id: "mke64j2d", name: "Two Gods" },
		{ id: "jdzzjjrd", name: "All Remembrances" },
		{ id: "824833gk", name: "All Remembrances (No DLC)" },
		{ id: "7dgpjjgd", name: "Console" },
		{ id: "7kjwnn3d", name: "All Achievements" },
		{ id: "mkey0882", name: "Any% No Wrong Warp (Archived)" },
		{ id: "wdmrgrxk", name: "Deprecated" }
	],
	bloodborne: [
		{ id: "wk6l0pk1", name: "Any% Current Patch" },
		{ id: "xd1rqzrk", name: "All Bosses" },
		{ id: "w20omz2n", name: "Any% Glitchless" },
		{ id: "7dg693gk", name: "All Bosses Glitchless" },
		{ id: "jdr1zol2", name: "Any% Blood Level 4" },
		{ id: "vdoql56k", name: "All Bosses Blood Level 4" },
		{ id: "02q8vz92", name: "All Trophies" }
	],
	darksouls: [
		{ id: "7dg75ld4", name: "Any% No Wrong Warp" },
		{ id: "xk9zng20", name: "Any% Force Quit" },
		{ id: "mke7jn26", name: "All Bosses" },
		{ id: "zd3l9qnd", name: "All Achievements" },
		{ id: "xd1e44r2", name: "100%" },
		{ id: "ndx1pwo2", name: "Soul Level 1" },
		{ id: "mke153n2", name: "New Game+" },
		{ id: "wdm841e2", name: "Artorias of the Abyss" },
		{ id: "vdo3qe6d", name: "Least Bosses" },
		{ id: "zdn107qk", name: "Lord of the Rings" },
		{ id: "5dw8yrgd", name: "All Bosses No DLC" }
	],
	darksouls2: [
		{ id: "jdzv9gkv", name: "Any% Current Patch" },
		{ id: "xk9nr620", name: "All Bosses" },
		{ id: "5dw84ndg", name: "Old Souls (CP)" },
		{ id: "824x47wd", name: "All Bosses No DLC" },
		{ id: "q258ngg2", name: "All Achievements" }
	],
	darksouls3: [
		{ id: "7kjz1ond", name: "All Bosses" },
		{ id: "jdz6v9v2", name: "Any% Glitchless" },
		{ id: "02qml3pd", name: "All Bosses Glitchless" },
		{ id: "xk9lx0gk", name: "Any% Restricted" },
		{ id: "jdzvw3xk", name: "Any% CP" },
		{ id: "xk9r81gk", name: "All Bosses (No DLC)" },
		{ id: "vdoqy06k", name: "All Bosses (SL1)" }
	],
	demonssouls: [
		{ id: "wk64grxd", name: "Any% Glitchless" },
		{ id: "9d83j762", name: "Any% SL1" },
		{ id: "w20zlmjd", name: "All Trophies" },
		{ id: "ndxpx5o2", name: "Any% Glitchless (RTA Legacy)" }
	],
	ds1remaster: [
		{ id: "ndx1pm52", name: "Any%" },
		{ id: "wdm84w52", name: "No Wrong Warp" },
		{ id: "xd173pzd", name: "Any% Force Quit" },
		{ id: "vdo3qoyd", name: "All Bosses" },
		{ id: "w20vqvvk", name: "All Achievements" },
		{ id: "xd1vlqzd", name: "Glitchless" },
		{ id: "9d839032", name: "Soul Level 1" }
	],
	ds2sotfs: [
		{ id: "zdnwmlqd", name: "Old Souls" },
		{ id: "zd3ernkn", name: "All Bosses" },
		{ id: "xd11mjzd", name: "All Achievements" }
	],
	desremake: [
		{ id: "5dw60g52", name: "Any%", subcategories: [
			{ id: "ylp6e5jn", name: "Unrestricted", value: "p12j9xkq" },
			{ id: "ylp6e5jn", name: "No Bow Tech", value: "81pkedkl" }
		]},
		{ id: "rkl3386k", name: "Any% Glitchless" },
		{ id: "z274l4g2", name: "Any% Force Quit" },
		{ id: "vdoxoj1d", name: "Any% SL1" },
		{ id: "9kv66ge2", name: "Offline Trophies" }
	]
};

// Get game ID from game name
const gameId = GAME_IDS[game.toLowerCase()] || game;

// Get categories for the current game
const categories = GAME_CATEGORIES[game.toLowerCase()] || [];

// Find the selected category (by ID or name)
const selectedCategory = category ? categories.find(cat => 
	cat.id === category || cat.name === category
) : null;

// If subcategories is specified, find the subcategory
let selectedSubcategory = null;
if (selectedCategory && subcategories && selectedCategory.subcategories) {
	selectedSubcategory = selectedCategory.subcategories.find(sub => 
		sub.name === subcategories
	);
}

// If category is provided but not found in predefined categories, create a fallback
const fallbackCategory = category && !selectedCategory ? { id: category, name: category } : null;
const effectiveCategory = selectedCategory || fallbackCategory;

// Helper function to get platform names
const getPlatformName = async (platformId: string): Promise<string> => {
	try {
		const response = await fetch(`https://www.speedrun.com/api/v1/platforms/${platformId}`);
		if (response.ok) {
			const data = await response.json();
			return data.data.name || platformId;
		}
	} catch (error) {
		console.error('Error fetching platform name:', error);
	}
	return platformId;
};

// Fetch real data from Speedrun.com API using leaderboards
const getSpeedrunData = async (gameId: string, categoryId?: string, subcategoryVariable?: { id: string, value: string }): Promise<SpeedrunRun[]> => {
	try {
		if (!categoryId) {
			return [];
		}

		// Build the API URL for leaderboards
		const apiUrl = `https://www.speedrun.com/api/v1/leaderboards/${gameId}/category/${categoryId}`;
		
		// Add query parameters for leaderboard
		const params = new URLSearchParams({
			top: '10', // Only return top 10 places
			embed: 'players,platforms' // Embed players and platforms for better data
		});
		
		// Add subcategory variable if specified (e.g., var-ylp6e5jn=81pkedkl)
		if (subcategoryVariable) {
			params.set(`var-${subcategoryVariable.id}`, subcategoryVariable.value);
		}
		
		const response = await fetch(`${apiUrl}?${params}`);
		
		if (!response.ok) {
			console.error(`Failed to fetch leaderboard data: ${response.status}`);
			return [];
		}
		
		const data = await response.json();
		
		// Transform the leaderboard response to our format
		const transformedRuns = [];
		
		if (data.data && data.data.runs) {
			for (const runEntry of data.data.runs) {
				const run = runEntry.run;
				
				// Extract player name(s) from the embedded players data
				let playerName = 'Unknown';
				let playerId = null;
				
				// First try to get player from the run's players array (basic player info)
				if (run.players && run.players.length > 0) {
					playerId = run.players[0].id;
				}
				
				// Then look up the full player details from the embedded players data
				if (playerId && data.data.players && data.data.players.data) {
					const player = data.data.players.data.find((p: any) => p.id === playerId);
					if (player && player.names) {
						playerName = player.names.international || player.names.japanese || 'Unknown';
					}
				}
				
				// Format the time based on leaderboard timing
				let formattedTime = 'Unknown';
				if (run.times) {
					let timeInSeconds = 0;
					
					// Use the timing method specified by the leaderboard
					if (data.data.timing === 'ingame' && run.times.ingame_t) {
						timeInSeconds = run.times.ingame_t;
					} else if (data.data.timing === 'realtime' && run.times.primary_t) {
						timeInSeconds = run.times.primary_t;
					} else if (data.data.timing === 'realtime_noloads' && run.times.realtime_noloads_t) {
						timeInSeconds = run.times.realtime_noloads_t;
					} else if (run.times.primary_t) {
						// Fallback to primary time
						timeInSeconds = run.times.primary_t;
					}
					
					if (timeInSeconds > 0) {
						const hours = Math.floor(timeInSeconds / 3600);
						const minutes = Math.floor((timeInSeconds % 3600) / 60);
						const seconds = timeInSeconds % 60;
						
						if (hours > 0) {
							formattedTime = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
						} else {
							formattedTime = `${minutes}:${seconds.toString().padStart(2, '0')}`;
						}
					}
				}
				
				// Format the date
				let formattedDate = 'Unknown';
				if (run.date) {
					const date = new Date(run.date);
					formattedDate = date.toLocaleDateString();
				}
				
				// Get platform name from embedded data
				let platformName = 'Unknown';
				if (run.system && run.system.platform) {
					// Try to get platform name from embedded platforms data first
					if (data.data.platforms && data.data.platforms.data) {
						const platform = data.data.platforms.data.find((p: any) => p.id === run.system.platform);
						if (platform) {
							platformName = platform.name;
						} else {
							// Fallback to API call if not found in embedded data
							platformName = await getPlatformName(run.system.platform);
						}
					} else {
						// Fallback to API call if no embedded platforms
						platformName = await getPlatformName(run.system.platform);
					}
				}
				
				// Get video URL from the run
				let videoUrl = null;
				if (run.videos && run.videos.links && run.videos.links.length > 0) {
					videoUrl = run.videos.links[0].uri;
				}
				
				transformedRuns.push({
					player: playerName,
					playerId: playerId || 'unknown',
					igt: formattedTime,
					date: formattedDate,
					platform: platformName,
					videoUrl: videoUrl
				});
			}
		}
		
		return transformedRuns;
		
	} catch (error) {
		console.error('Error fetching leaderboard data:', error);
		return [];
	}
};

// Fetch speedrun data
let runs: SpeedrunRun[] = [];
try {
	// If we have a selected subcategory, pass the variable information
	const subcategoryVariable = selectedSubcategory ? { id: selectedSubcategory.id, value: selectedSubcategory.value } : undefined;
	runs = await getSpeedrunData(gameId, effectiveCategory?.id, subcategoryVariable);
} catch (error) {
	console.error('Failed to fetch speedrun data:', error);
}
---

<div class="speedrun-table-container">	
	<div class="custom-table">
		<div class="table-header">
			<div class="header-cell">Pos.</div>
			<div class="header-cell">Player</div>
			<div class="header-cell">Date</div>
			<div class="header-cell">Platform</div>
			<div class="header-cell">IGT</div>
		</div>
		
		{!effectiveCategory ? (
			<div class="table-row">
				<div class="table-cell no-data" style="text-align: center; padding: 2rem;">
					Please select a category to view speedrun data.
				</div>
			</div>
		) : runs.length > 0 ? (
			runs.map((run, index) => (
				<div class="table-row">
					<div class="table-cell position-cell">
						<span class={`position-number ${index === 0 ? 'gold' : index === 1 ? 'silver' : index === 2 ? 'bronze' : ''}`}>
							{index + 1}.
						</span>
					</div>
					<div class="table-cell">
						{run.videoUrl ? (
							<a href={run.videoUrl} target="_blank" rel="noopener noreferrer" class="player-link">
								{run.player}
							</a>
						) : (
							<span>{run.player}</span>
						)}
					</div>
					<div class="table-cell">{run.date}</div>
					<div class="table-cell">{run.platform}</div>
					<div class="table-cell">{run.igt}</div>
				</div>
			))
		) : (
			<div class="table-row">
				<div class="table-cell no-data" style="text-align: center; padding: 2rem;">
					No speedrun data available for this category.
				</div>
			</div>
		)}
	</div>
	
	{/* Leaderboard info */}
	<div class="leaderboard-info">
		<div class="info-text">
			{effectiveCategory ? (
				<>
					Showing top 10 verified runs from <a href={`https://www.speedrun.com/${game}`} target="_blank" rel="noopener noreferrer">Speedrun.com leaderboards</a> for {effectiveCategory.name}. Data fetched on {new Date(BUILD_TIME).toLocaleString()}.
				</>
			) : (
				'Select a category to view speedrun leaderboards'
			)}
		</div>
	</div>
</div>



<style>

	.custom-table {
		width: 100%;
		border-collapse: collapse;
		overflow-x: auto;
	}
	
	.table-header, .table-row {
		display: table-row;
		width: 100%;
	}
	
	.header-cell, .table-cell {
		display: table-cell;
		padding: 0.5rem;
		text-align: left;
		border-bottom: 1px solid var(--sl-color-gray-5);
	}
	
	.header-cell {
		font-weight: 600;
	}
	
	/* Make Player column expand to fill available space */
	.header-cell:nth-child(2), .table-cell:nth-child(2) {
		width: 100%;
		font-weight: 600;
	}
	
	/* Keep other columns at natural width */
	.header-cell:nth-child(1), .table-cell:nth-child(1) { /* Position */
		width: auto;
	}
	
	.header-cell:nth-child(3), .table-cell:nth-child(3) { /* Date */
		width: auto;
	}
	
	.header-cell:nth-child(4), .table-cell:nth-child(4) { /* Platform */
		width: auto;
		min-width: 150px;
	}
	
	.header-cell:nth-child(5), .table-cell:nth-child(5) { /* IGT */
		width: auto;
		text-align: right;
		padding-right: 1rem;
	}
	
	.position-number {
		font-weight: bold;
		color: var(--sl-color-gray-8);
	}
	
	.position-number.gold {
		color: gold;
	}
	
	.position-number.silver {
		color: silver;
	}
	
	.position-number.bronze {
		color: #cd7f32;
	}
	
</style>

